{"version":3,"file":"eta.min.js","sources":["../../src/err.ts","../../src/polyfills.ts","../../src/utils.ts","../../src/parse.ts","../../src/compile-string.ts","../../src/storage.ts","../../src/containers.ts","../../src/config.ts","../../src/compile.ts","../../src/render.ts"],"sourcesContent":["function setPrototypeOf(obj: any, proto: any) {\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(obj, proto)\n  } else {\n    obj.__proto__ = proto\n  }\n}\n\n// This is pretty much the only way to get nice, extended Errors\n// without using ES6\n\nexport default function EtaErr(message: string): Error {\n  var err = new Error(message)\n  setPrototypeOf(err, EtaErr.prototype)\n  return err\n}\n\nEtaErr.prototype = Object.create(Error.prototype, {\n  name: { value: 'Eta Error', enumerable: false },\n})\n\nexport function ParseErr(message: string, str: string, indx: number) {\n  var whitespace = str.slice(0, indx).split(/\\n/)\n\n  var lineNo = whitespace.length\n  var colNo = whitespace[lineNo - 1].length + 1\n  message +=\n    ' at line ' +\n    lineNo +\n    ' col ' +\n    colNo +\n    ':\\n\\n' +\n    '  ' +\n    str.split(/\\n/)[lineNo - 1] +\n    '\\n' +\n    '  ' +\n    Array(colNo).join(' ') +\n    '^'\n  throw EtaErr(message)\n}\n","import EtaErr from './err'\n\nexport var promiseImpl = new Function('return this')().Promise\n\nexport function getAsyncFunctionConstructor(): Function {\n  try {\n    return new Function('return (async function(){}).constructor')()\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\"This environment doesn't support async/await\")\n    } else {\n      throw e\n    }\n  }\n}\n\nexport function trimLeft(str: string): string {\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (!!String.prototype.trimLeft) {\n    return str.trimLeft()\n  } else {\n    return str.replace(/^\\s+/, '')\n  }\n}\n\nexport function trimRight(str: string): string {\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (!!String.prototype.trimRight) {\n    return str.trimRight()\n  } else {\n    return str.replace(/\\s+$/, '') // TODO: do we really need to replace BOM's?\n  }\n}\n","// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\n// TODO: only include trimLeft polyfill if not in ES6\n\nimport { trimLeft, trimRight } from './polyfills'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\n\ninterface EscapeMap {\n  '&': '&amp;'\n  '<': '&lt;'\n  '>': '&gt;'\n  '\"': '&quot;'\n  \"'\": '&#39;'\n  [index: string]: string\n}\n\n/* END TYPES */\n\nexport function hasOwnProp(obj: object, prop: string) {\n  return Object.prototype.hasOwnProperty.call(obj, prop)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function copyProps<T>(toObj: T, fromObj: T) {\n  for (var key in fromObj) {\n    if (hasOwnProp((fromObj as unknown) as object, key)) {\n      toObj[key] = fromObj[key]\n    }\n  }\n  return toObj\n}\n\nfunction trimWS(\n  str: string,\n  env: EtaConfig,\n  wsLeft: string | false,\n  wsRight?: string | false\n): string {\n  var leftTrim\n  var rightTrim\n\n  if (Array.isArray(env.autoTrim)) {\n    // kinda confusing\n    // but _}} will trim the left side of the following string\n    leftTrim = env.autoTrim[1]\n    rightTrim = env.autoTrim[0]\n  } else {\n    leftTrim = rightTrim = env.autoTrim\n  }\n\n  if (wsLeft || wsLeft === false) {\n    leftTrim = wsLeft\n  }\n\n  if (wsRight || wsRight === false) {\n    rightTrim = wsRight\n  }\n\n  if (!rightTrim && !leftTrim) {\n    return str\n  }\n\n  if (leftTrim === 'slurp' && rightTrim === 'slurp') {\n    return str.trim()\n  }\n\n  if (leftTrim === '_' || leftTrim === 'slurp') {\n    // console.log('trimming left' + leftTrim)\n    // full slurp\n\n    str = trimLeft(str)\n  } else if (leftTrim === '-' || leftTrim === 'nl') {\n    // nl trim\n    str = str.replace(/^(?:\\r\\n|\\n|\\r)/, '')\n  }\n\n  if (rightTrim === '_' || rightTrim === 'slurp') {\n    // full slurp\n    str = trimRight(str)\n  } else if (rightTrim === '-' || rightTrim === 'nl') {\n    // nl trim\n    str = str.replace(/(?:\\r\\n|\\n|\\r)$/, '') // TODO: make sure this gets \\r\\n\n  }\n\n  return str\n}\n\nvar escMap: EscapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n}\n\nfunction replaceChar(s: string): string {\n  return escMap[s]\n}\n\nfunction XMLEscape(str: any) {\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  var newStr = String(str)\n  if (/[&<>\"']/.test(newStr)) {\n    return newStr.replace(/[&<>\"']/g, replaceChar)\n  } else {\n    return newStr\n  }\n}\n\nexport { trimWS, XMLEscape }\n","import { ParseErr } from './err'\nimport { trimWS } from './utils'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\n\nexport type TagType = 'r' | 'e' | 'i' | ''\n\nexport interface TemplateObject {\n  t: TagType\n  val: string\n}\n\nexport type AstObject = string | TemplateObject\n\n/* END TYPES */\n\nvar templateLitReg = /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\\${)[^\\\\`])*`/g\n\nvar singleQuoteReg = /'(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r'\\\\])*?'/g\n\nvar doubleQuoteReg = /\"(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r\"\\\\])*?\"/g\n\nfunction escapeRegExp(string: string) {\n  // From MDN\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport default function parse(str: string, env: EtaConfig): Array<AstObject> {\n  var buffer: Array<AstObject> = []\n  var trimLeftOfNextStr: string | false = false\n  var lastIndex = 0\n  var parseOptions = env.parse\n\n  /* Adding for EJS compatibility */\n  if (env.rmWhitespace) {\n    // Code taken directly from EJS\n    // Have to use two separate replaces here as `^` and `$` operators don't\n    // work well with `\\r` and empty lines don't work well with the `m` flag.\n    // Essentially, this replaces the whitespace at the beginning and end of\n    // each line and removes multiple newlines.\n    str = str.replace(/[\\r\\n]+/g, '\\n').replace(/^\\s+|\\s+$/gm, '')\n  }\n  /* End rmWhitespace option */\n\n  templateLitReg.lastIndex = 0\n  singleQuoteReg.lastIndex = 0\n  doubleQuoteReg.lastIndex = 0\n\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\n    if (strng) {\n      // if string is truthy it must be of type 'string'\n\n      strng = trimWS(\n        strng,\n        env,\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n        shouldTrimRightOfString\n      )\n\n      if (strng) {\n        // replace \\ with \\\\, ' with \\'\n\n        strng = strng.replace(/\\\\|'/g, '\\\\$&').replace(/\\r\\n|\\n|\\r/g, '\\\\n')\n        // we're going to convert all CRLF to LF so it doesn't take more than one replace\n\n        buffer.push(strng)\n      }\n    }\n  }\n\n  var prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (\n    accumulator,\n    prefix\n  ) {\n    if (accumulator && prefix) {\n      return accumulator + '|' + escapeRegExp(prefix)\n    } else if (prefix) {\n      // accumulator is falsy\n      return escapeRegExp(prefix)\n    } else {\n      // prefix and accumulator are both falsy\n      return accumulator\n    }\n  },\n  '')\n\n  var parseOpenReg = new RegExp(\n    '([^]*?)' + escapeRegExp(env.tags[0]) + '(-|_)?\\\\s*(' + prefixes + ')?\\\\s*',\n    'g'\n  )\n\n  var parseCloseReg = new RegExp('\\'|\"|`|\\\\/\\\\*|(\\\\s*(-|_)?' + escapeRegExp(env.tags[1]) + ')', 'g')\n  // TODO: benchmark having the \\s* on either side vs using str.trim()\n\n  var m\n\n  while ((m = parseOpenReg.exec(str))) {\n    lastIndex = m[0].length + m.index\n\n    var precedingString = m[1]\n    var wsLeft = m[2]\n    var prefix = m[3] || '' // by default either ~, =, or empty\n\n    pushString(precedingString, wsLeft)\n\n    parseCloseReg.lastIndex = lastIndex\n    var closeTag\n    var currentObj: AstObject | false = false\n\n    while ((closeTag = parseCloseReg.exec(str))) {\n      if (closeTag[1]) {\n        var content = str.slice(lastIndex, closeTag.index)\n\n        parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex\n\n        trimLeftOfNextStr = closeTag[2]\n\n        var currentType: TagType = ''\n        if (prefix === parseOptions.exec) {\n          currentType = 'e'\n        } else if (prefix === parseOptions.raw) {\n          currentType = 'r'\n        } else if (prefix === parseOptions.interpolate) {\n          currentType = 'i'\n        }\n\n        currentObj = { t: currentType, val: content }\n        break\n      } else {\n        var char = closeTag[0]\n        if (char === '/*') {\n          var commentCloseInd = str.indexOf('*/', parseCloseReg.lastIndex)\n\n          if (commentCloseInd === -1) {\n            ParseErr('unclosed comment', str, closeTag.index)\n          }\n          parseCloseReg.lastIndex = commentCloseInd\n        } else if (char === \"'\") {\n          singleQuoteReg.lastIndex = closeTag.index\n\n          var singleQuoteMatch = singleQuoteReg.exec(str)\n          if (singleQuoteMatch) {\n            parseCloseReg.lastIndex = singleQuoteReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        } else if (char === '\"') {\n          doubleQuoteReg.lastIndex = closeTag.index\n          var doubleQuoteMatch = doubleQuoteReg.exec(str)\n\n          if (doubleQuoteMatch) {\n            parseCloseReg.lastIndex = doubleQuoteReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        } else if (char === '`') {\n          templateLitReg.lastIndex = closeTag.index\n          var templateLitMatch = templateLitReg.exec(str)\n          if (templateLitMatch) {\n            parseCloseReg.lastIndex = templateLitReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        }\n      }\n    }\n    if (currentObj) {\n      buffer.push(currentObj)\n    } else {\n      ParseErr('unclosed tag', str, m.index + precedingString.length)\n    }\n  }\n\n  pushString(str.slice(lastIndex, str.length), false)\n\n  if (env.plugins) {\n    for (var i = 0; i < env.plugins.length; i++) {\n      var plugin = env.plugins[i]\n      if (plugin.processAST) {\n        buffer = plugin.processAST(buffer, env)\n      }\n    }\n  }\n\n  return buffer\n}\n","import Parse from './parse'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\nimport { AstObject } from './parse'\n\n/* END TYPES */\n\nexport default function compileToString(str: string, env: EtaConfig) {\n  var buffer: Array<AstObject> = Parse(str, env)\n\n  var res =\n    \"var tR=''\\n\" +\n    (env.useWith ? 'with(' + env.varName + '||{}){' : '') +\n    compileScope(buffer, env) +\n    'if(cb){cb(null,tR)} return tR' +\n    (env.useWith ? '}' : '')\n\n  if (env.plugins) {\n    for (var i = 0; i < env.plugins.length; i++) {\n      var plugin = env.plugins[i]\n      if (plugin.processFnString) {\n        res = plugin.processFnString(res, env)\n      }\n    }\n  }\n\n  return res\n}\n\nfunction compileScope(buff: Array<AstObject>, env: EtaConfig) {\n  var i = 0\n  var buffLength = buff.length\n  var returnStr = ''\n\n  for (i; i < buffLength; i++) {\n    var currentBlock = buff[i]\n    if (typeof currentBlock === 'string') {\n      var str = currentBlock\n\n      // we know string exists\n      returnStr += \"tR+='\" + str + \"'\\n\"\n    } else {\n      var type = currentBlock.t // ~, s, !, ?, r\n      var content = currentBlock.val || ''\n\n      if (type === 'r') {\n        // raw\n        returnStr += 'tR+=' + content + '\\n'\n      } else if (type === 'i') {\n        // interpolate\n        if (env.autoEscape) {\n          content = 'E.e(' + content + ')'\n        }\n        returnStr += 'tR+=' + content + '\\n'\n        // reference\n      } else if (type === 'e') {\n        // execute\n        returnStr += content + '\\n' // you need a \\n in case you have <% } %>\n      }\n    }\n  }\n\n  return returnStr\n}\n","import { copyProps } from './utils'\n\n/* TYPES */\n\ninterface Dict<T> {\n  // Basically, an object where all keys point to a value of the same type\n  [key: string]: T\n}\n\n/* END TYPES */\n\nclass Cacher<T> {\n  constructor(private cache: Dict<T>) {}\n  define(key: string, val: T) {\n    this.cache[key] = val\n  }\n  get(key: string) {\n    // string | array.\n    // TODO: allow array of keys to look down\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\n    return this.cache[key]\n  }\n  remove(key: string) {\n    delete this.cache[key]\n  }\n  reset() {\n    this.cache = {}\n  }\n  load(cacheObj: Dict<T>) {\n    copyProps(this.cache, cacheObj)\n  }\n}\n\nexport { Cacher }\n","import { Cacher } from './storage'\n\n/* TYPES */\n\nimport { TemplateFunction } from './compile'\n\n/* END TYPES */\n\nvar templates = new Cacher<TemplateFunction>({})\n\nexport { templates }\n","import { templates } from './containers'\nimport { copyProps, XMLEscape } from './utils'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { TemplateFunction } from './compile'\nimport { Cacher } from './storage'\n\ntype trimConfig = 'nl' | 'slurp' | false\n\nexport interface EtaConfig {\n  varName: string\n  autoTrim: trimConfig | [trimConfig, trimConfig]\n  rmWhitespace: boolean\n  autoEscape: boolean\n  tags: [string, string]\n  parse: {\n    interpolate: string\n    raw: string\n    exec: string\n  }\n  e: (str: string) => string\n  plugins: Array<{ processFnString?: Function; processAST?: Function }>\n  async: boolean\n  templates: Cacher<TemplateFunction>\n  cache: boolean\n  views?: string | Array<string>\n  root?: string\n  filename?: string\n  name?: string\n  'view cache'?: boolean\n  useWith?: boolean\n  [index: string]: any // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport type PartialConfig = Partial<EtaConfig>\n\n/* END TYPES */\n\nfunction includeHelper(this: EtaConfig, templateNameOrPath: string, data: object): string {\n  var template = this.templates.get(templateNameOrPath)\n  if (!template) {\n    throw EtaErr('Could not fetch template \"' + templateNameOrPath + '\"')\n  }\n  return template(data, this)\n}\n\nvar defaultConfig: EtaConfig = {\n  varName: 'it',\n  autoTrim: [false, 'nl'],\n  rmWhitespace: false,\n  autoEscape: true,\n  tags: ['<%', '%>'],\n  parse: {\n    interpolate: '=',\n    raw: '~',\n    exec: '',\n  },\n  async: false,\n  templates: templates,\n  cache: false,\n  plugins: [],\n  useWith: false,\n  e: XMLEscape,\n  include: includeHelper,\n}\n\nincludeHelper.bind(defaultConfig)\n\nfunction getConfig(override: PartialConfig, baseConfig?: EtaConfig): EtaConfig {\n  // TODO: run more tests on this\n\n  var res: PartialConfig = {} // Linked\n  copyProps(res, defaultConfig) // Creates deep clone of defaultConfig, 1 layer deep\n\n  if (baseConfig) {\n    copyProps(res, baseConfig)\n  }\n\n  if (override) {\n    copyProps(res, override)\n  }\n\n  return res as EtaConfig\n}\n\nexport { defaultConfig, getConfig }\n","import compileToString from './compile-string'\nimport { getConfig } from './config'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig, PartialConfig } from './config'\nimport { CallbackFn } from './file-handlers'\nimport { getAsyncFunctionConstructor } from './polyfills'\nexport type TemplateFunction = (data: object, config: EtaConfig, cb?: CallbackFn) => string\n\n/* END TYPES */\n\nexport default function compile(str: string, env?: PartialConfig): TemplateFunction {\n  var options: EtaConfig = getConfig(env || {})\n  var ctor // constructor\n\n  /* ASYNC HANDLING */\n  // The below code is modified from mde/ejs. All credit should go to them.\n  if (options.async) {\n    ctor = getAsyncFunctionConstructor() as FunctionConstructor\n  } else {\n    ctor = Function\n  }\n  /* END ASYNC HANDLING */\n  try {\n    return new ctor(\n      options.varName,\n      'E', // EtaConfig\n      'cb', // optional callback\n      compileToString(str, options)\n    ) as TemplateFunction // eslint-disable-line no-new-func\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\n        'Bad template syntax\\n\\n' +\n          e.message +\n          '\\n' +\n          Array(e.message.length + 1).join('=') +\n          '\\n' +\n          compileToString(str, options) +\n          '\\n' // This will put an extra newline before the callstack for extra readability\n      )\n    } else {\n      throw e\n    }\n  }\n}\n","import compile from './compile'\nimport { getConfig } from './config'\nimport { promiseImpl } from './polyfills'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig, PartialConfig } from './config'\nimport { TemplateFunction } from './compile'\nimport { CallbackFn } from './file-handlers'\n\n/* END TYPES */\n\nfunction handleCache(template: string | TemplateFunction, options: EtaConfig): TemplateFunction {\n  var templateFunc\n\n  if (options.cache && options.name && options.templates.get(options.name)) {\n    return options.templates.get(options.name)\n  }\n\n  if (typeof template === 'function') {\n    templateFunc = template\n  } else {\n    templateFunc = compile(template, options)\n  }\n\n  if (options.cache && options.name) {\n    options.templates.define(options.name, templateFunc)\n  }\n\n  return templateFunc\n}\n\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  env?: PartialConfig,\n  cb?: CallbackFn\n) {\n  var options = getConfig(env || {})\n\n  if (options.async) {\n    var result\n    if (!cb) {\n      // No callback, try returning a promise\n      if (typeof promiseImpl === 'function') {\n        return new promiseImpl(function (resolve: Function, reject: Function) {\n          try {\n            result = handleCache(template, options)(data, options)\n            resolve(result)\n          } catch (err) {\n            reject(err)\n          }\n        })\n      } else {\n        throw EtaErr(\"Please provide a callback function, this env doesn't support Promises\")\n      }\n    } else {\n      try {\n        handleCache(template, options)(data, options, cb)\n      } catch (err) {\n        return cb(err)\n      }\n    }\n  } else {\n    return handleCache(template, options)(data, options)\n  }\n}\n"],"names":["EtaErr","message","obj","proto","err","Error","prototype","Object","setPrototypeOf","__proto__","ParseErr","str","indx","whitespace","slice","split","lineNo","length","colNo","Array","join","create","name","value","enumerable","promiseImpl","Function","Promise","copyProps","toObj","fromObj","key","prop","hasOwnProperty","call","trimWS","env","wsLeft","wsRight","leftTrim","rightTrim","isArray","autoTrim","trim","String","trimLeft","replace","trimRight","escMap","&","<",">","\"","'","replaceChar","s","templateLitReg","singleQuoteReg","doubleQuoteReg","escapeRegExp","string","parse","buffer","trimLeftOfNextStr","lastIndex","parseOptions","pushString","strng","shouldTrimRightOfString","push","rmWhitespace","m","prefixes","exec","interpolate","raw","reduce","accumulator","prefix","parseOpenReg","RegExp","tags","parseCloseReg","index","closeTag","precedingString","currentObj","content","currentType","t","val","char","commentCloseInd","indexOf","plugins","i","plugin","processAST","compileToString","Parse","res","useWith","varName","buff","buffLength","returnStr","currentBlock","type","autoEscape","compileScope","processFnString","templates","cache","this","Cacher","cacheObj","includeHelper","templateNameOrPath","data","template","get","defaultConfig","async","e","newStr","test","include","getConfig","override","baseConfig","compile","ctor","options","SyntaxError","getAsyncFunctionConstructor","handleCache","templateFunc","define","bind","cb","resolve","reject"],"mappings":"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"}