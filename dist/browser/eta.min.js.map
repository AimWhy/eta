{"version":3,"file":"eta.min.js","sources":["../../src/err.ts","../../src/utils.ts","../../src/parse.ts","../../src/compile-string.ts","../../src/storage.ts","../../src/containers.ts","../../src/config.ts","../../src/compile.ts","../../src/render.ts"],"sourcesContent":["function setPrototypeOf (obj: any, proto: any) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(obj, proto)\n  } else {\n    obj.__proto__ = proto\n  }\n}\n\nexport default function EtaErr (message: string): Error {\n  var err = new Error(message)\n  setPrototypeOf(err, EtaErr.prototype)\n  return err\n}\n\nEtaErr.prototype = Object.create(Error.prototype, {\n  name: { value: 'Eta Error', enumerable: false }\n})\n\n// TODO: Class transpilation adds a lot to the bundle size\n\nexport function ParseErr (message: string, str: string, indx: number) {\n  var whitespace = str.slice(0, indx).split(/\\n/)\n\n  var lineNo = whitespace.length\n  var colNo = whitespace[lineNo - 1].length + 1\n  message +=\n    ' at line ' +\n    lineNo +\n    ' col ' +\n    colNo +\n    ':\\n\\n' +\n    '  ' +\n    str.split(/\\n/)[lineNo - 1] +\n    '\\n' +\n    '  ' +\n    Array(colNo).join(' ') +\n    '^'\n  throw EtaErr(message)\n}\n","// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\n// TODO: only include trimLeft polyfill if not in ES6\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\n\ninterface EscapeMap {\n  '&': '&amp;'\n  '<': '&lt;'\n  '\"': '&quot;'\n  \"'\": '&#39;'\n  [index: string]: string\n}\n\n/* END TYPES */\n\nexport var promiseImpl = new Function('return this;')().Promise\n\nexport function hasOwnProp (obj: object, prop: string) {\n  return Object.prototype.hasOwnProperty.call(obj, prop)\n}\n\nexport function copyProps<T> (toObj: T, fromObj: T, notConfig?: boolean) {\n  for (var key in fromObj) {\n    if (hasOwnProp((fromObj as unknown) as object, key)) {\n      toObj[key] = fromObj[key]\n    }\n  }\n  return toObj\n}\n\nfunction trimWS (\n  str: string,\n  env: EtaConfig,\n  wsLeft: string | false,\n  wsRight?: string | false\n): string {\n  var leftTrim\n  var rightTrim\n\n  if (typeof env.autoTrim === 'string') {\n    leftTrim = rightTrim = env.autoTrim\n  } else if (Array.isArray(env.autoTrim)) {\n    // kinda confusing\n    // but _}} will trim the left side of the following string\n    leftTrim = env.autoTrim[1]\n    rightTrim = env.autoTrim[0]\n  }\n\n  if (wsLeft || wsLeft === false) {\n    leftTrim = wsLeft\n  }\n\n  if (wsRight || wsRight === false) {\n    rightTrim = wsRight\n  }\n\n  if (leftTrim === 'slurp' && rightTrim === 'slurp') {\n    return str.trim()\n  }\n\n  if (leftTrim === '_' || leftTrim === 'slurp') {\n    // console.log('trimming left' + leftTrim)\n    // full slurp\n    if (String.prototype.trimLeft) {\n      str = str.trimLeft()\n    } else {\n      str = str.replace(/^[\\s\\uFEFF\\xA0]+/, '')\n    }\n  } else if (leftTrim === '-' || leftTrim === 'nl') {\n    // console.log('trimming left nl' + leftTrim)\n    // nl trim\n    str = str.replace(/^(?:\\n|\\r|\\r\\n)/, '')\n  }\n\n  if (rightTrim === '_' || rightTrim === 'slurp') {\n    // console.log('trimming right' + rightTrim)\n    // full slurp\n    if (String.prototype.trimRight) {\n      str = str.trimRight()\n    } else {\n      str = str.replace(/[\\s\\uFEFF\\xA0]+$/, '')\n    }\n  } else if (rightTrim === '-' || rightTrim === 'nl') {\n    // console.log('trimming right nl' + rightTrim)\n    // nl trim\n    str = str.replace(/(?:\\n|\\r|\\r\\n)$/, '') // TODO: make sure this gets \\r\\n\n  }\n\n  return str\n}\n\nvar escMap: EscapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n}\n\nfunction replaceChar (s: string): string {\n  return escMap[s]\n}\n\nfunction XMLEscape (str: any) {\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  var newStr = String(str)\n  if (/[&<\"']/.test(newStr)) {\n    return newStr.replace(/[&<\"']/g, replaceChar)\n  } else {\n    return newStr\n  }\n}\n\nexport { trimWS, XMLEscape }\n","import EtaErr, { ParseErr } from './err'\nimport { trimWS } from './utils'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\n\nexport type TagType = 'r' | 'e' | 'i' | ''\n\nexport interface TemplateObject {\n  t: TagType\n  val: string\n}\n\nexport type AstObject = string | TemplateObject\n\n/* END TYPES */\n\nexport default function parse(str: string, env: EtaConfig): Array<AstObject> {\n  var buffer: Array<AstObject> = []\n  var trimLeftOfNextStr: string | false = false\n  var lastIndex = 0\n\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\n    if (strng) {\n      // if string is truthy it must be of type 'string'\n      // replace \\ with \\\\, ' with \\'\n      var stringToPush = strng.replace(/\\\\|'/g, '\\\\$&')\n\n      // TODO: benchmark replace( /(\\\\|')/g, '\\\\$1')\n      stringToPush = trimWS(\n        stringToPush,\n        env,\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n        shouldTrimRightOfString\n      )\n\n      stringToPush = stringToPush.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r')\n\n      if (stringToPush) {\n        buffer.push(stringToPush)\n      }\n    }\n  }\n\n  var prefixes = (env.parse.exec + env.parse.interpolate + env.parse.raw).split('').join('|')\n\n  var parseOpenReg = new RegExp('([^]*?)' + env.tags[0] + '(-|_)?\\\\s*(' + prefixes + ')?', 'g')\n  var parseCloseReg = new RegExp(\n    '\\\\s*((?:[^]*?(?:\\'(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\n\\\\r\\'\\\\\\\\])*?\\'|`(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\\\\\`])*?`|\"(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\n\\\\r\"\\\\\\\\])*?\"|\\\\/\\\\*[^]*?\\\\*\\\\/)?)*?)\\\\s*(-|_)?' +\n      env.tags[1],\n    'g'\n  )\n  // TODO: benchmark having the \\s* on either side vs using str.trim()\n\n  var m\n\n  while ((m = parseOpenReg.exec(str)) !== null) {\n    lastIndex = m[0].length + m.index\n\n    var precedingString = m[1]\n    var wsLeft = m[2]\n    var prefix = m[3] || '' // by default either ~, =, or empty\n\n    pushString(precedingString, wsLeft)\n\n    parseCloseReg.lastIndex = lastIndex\n    var closeTag = parseCloseReg.exec(str)\n    if (closeTag) {\n      var content = closeTag[1]\n      trimLeftOfNextStr = closeTag[2]\n      parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex\n\n      var currentType: TagType = ''\n      if (prefix === env.parse.exec) {\n        currentType = 'e'\n      } else if (prefix === env.parse.raw) {\n        currentType = 'r'\n      } else if (prefix === env.parse.interpolate) {\n        currentType = 'i'\n      }\n\n      buffer.push({ t: currentType, val: content })\n    } else {\n      ParseErr('unclosed tag', str, lastIndex)\n    }\n  }\n\n  pushString(str.slice(lastIndex, str.length), false)\n\n  if (env.plugins) {\n    for (var i = 0; i < env.plugins.length; i++) {\n      var plugin = env.plugins[i]\n      if (plugin.processAST) {\n        buffer = plugin.processAST(buffer, env)\n      }\n    }\n  }\n\n  return buffer\n}\n","import Parse from './parse'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\nimport { AstObject } from './parse'\n\n/* END TYPES */\n\nexport default function compileToString (str: string, env: EtaConfig) {\n  var buffer: Array<AstObject> = Parse(str, env)\n\n  var res =\n    \"var tR='';\" +\n    (env.useWith ? 'with(' + env.varName + '||{}){' : '') +\n    compileScope(buffer, env) +\n    'if(cb){cb(null,tR)} return tR' +\n    (env.useWith ? '}' : '')\n\n  if (env.plugins) {\n    for (var i = 0; i < env.plugins.length; i++) {\n      var plugin = env.plugins[i]\n      if (plugin.processFnString) {\n        res = plugin.processFnString(res, env)\n      }\n    }\n  }\n\n  return res\n\n  // TODO: is `return cb()` necessary, or could we just do `cb()`\n}\n\nfunction compileScope (buff: Array<AstObject>, env: EtaConfig) {\n  var i = 0\n  var buffLength = buff.length\n  var returnStr = ''\n\n  for (i; i < buffLength; i++) {\n    var currentBlock = buff[i]\n    if (typeof currentBlock === 'string') {\n      var str = currentBlock\n\n      // we know string exists\n      returnStr += \"tR+='\" + str + \"';\"\n    } else {\n      var type = currentBlock.t // ~, s, !, ?, r\n      var content = currentBlock.val || ''\n\n      if (type === 'r') {\n        // raw\n        returnStr += 'tR+=' + content + ';'\n      } else if (type === 'i') {\n        // interpolate\n        if (env.autoEscape) {\n          content = 'E.e(' + content + ')'\n        }\n        returnStr += 'tR+=' + content + ';'\n        // reference\n      } else if (type === 'e') {\n        // execute\n        returnStr += content + '\\n' // you need a \\n in case you have <% } %>\n      }\n    }\n  }\n\n  return returnStr\n}\n","import { copyProps } from './utils'\n\n/* TYPES */\n\ninterface Dict<T> {\n  // Basically, an object where all keys point to a value of the same type\n  [key: string]: T\n}\n\n/* END TYPES */\n\nclass Cacher<T> {\n  constructor (private cache: Dict<T>) {}\n  define (key: string, val: T) {\n    this.cache[key] = val\n  }\n  get (key: string) {\n    // string | array.\n    // TODO: allow array of keys to look down\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\n    return this.cache[key]\n  }\n  remove (key: string) {\n    delete this.cache[key]\n  }\n  reset () {\n    this.cache = {}\n  }\n  load (cacheObj: Dict<T>) {\n    // TODO: this will err with deep objects and `storage` or `plugins` keys.\n    // Update Feb 26: EDITED so it shouldn't err\n    copyProps(this.cache, cacheObj, true)\n  }\n}\n\nexport { Cacher }\n","import { Cacher } from './storage'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\nimport { TemplateFunction } from './compile'\n\n/* END TYPES */\n\nvar templates = new Cacher<TemplateFunction>({})\n\n/* ASYNC LOOP FNs */\n\nexport { templates }\n","import { templates } from './containers'\nimport { copyProps, XMLEscape } from './utils'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { TemplateFunction } from './compile'\nimport { Cacher } from './storage'\n\ntype trimConfig = 'nl' | 'slurp' | false\n\nexport interface EtaConfig {\n  varName: string\n  autoTrim: trimConfig | [trimConfig, trimConfig]\n  autoEscape: boolean\n  tags: [string, string]\n  parse: {\n    interpolate: string\n    raw: string\n    exec: string\n  }\n  e: (str: string) => string\n  plugins: Array<{ processFnString?: Function; processAST?: Function }>\n  async: boolean\n  templates: Cacher<TemplateFunction>\n  cache: boolean\n  views?: string | Array<string>\n  root?: string\n  filename?: string\n  name?: string\n  'view cache'?: boolean\n  useWith?: boolean\n  [index: string]: any\n}\n\nexport type PartialConfig = {\n  [P in keyof EtaConfig]?: EtaConfig[P]\n}\n\n/* END TYPES */\n\nfunction includeHelper (this: EtaConfig, templateNameOrPath: string, data: object): string {\n  var template = this.templates.get(templateNameOrPath)\n  if (!template) {\n    throw EtaErr('Could not fetch template \"' + templateNameOrPath + '\"')\n  }\n  return template(data, this)\n}\n\nvar defaultConfig: EtaConfig = {\n  varName: 'it',\n  autoTrim: [false, 'nl'],\n  autoEscape: true,\n  tags: ['<%', '%>'],\n  parse: {\n    interpolate: '=',\n    raw: '~',\n    exec: ''\n  },\n  async: false,\n  templates: templates,\n  cache: false,\n  plugins: [],\n  useWith: false,\n  e: XMLEscape,\n  include: includeHelper\n}\n\nincludeHelper.bind(defaultConfig)\n\nfunction getConfig (override: PartialConfig, baseConfig?: EtaConfig): EtaConfig {\n  // TODO: run more tests on this\n\n  var res: PartialConfig = {} // Linked\n  copyProps(res, defaultConfig) // Creates deep clone of res, 1 layer deep\n\n  if (baseConfig) {\n    copyProps(res, baseConfig)\n  }\n\n  if (override) {\n    copyProps(res, override)\n  }\n\n  return res as EtaConfig\n}\n\nexport { defaultConfig, getConfig }\n","import compileToString from './compile-string'\nimport { getConfig } from './config'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig, PartialConfig } from './config'\nimport { CallbackFn } from './file-handlers'\nexport type TemplateFunction = (data: object, config: EtaConfig, cb?: CallbackFn) => string\n\n/* END TYPES */\n\nexport default function compile (str: string, env?: PartialConfig): TemplateFunction {\n  var options: EtaConfig = getConfig(env || {})\n  var ctor // constructor\n\n  /* ASYNC HANDLING */\n  // The below code is modified from mde/ejs. All credit should go to them.\n  if (options.async) {\n    // Have to use generated function for this, since in envs without support,\n    // it breaks in parsing\n    try {\n      ctor = new Function('return (async function(){}).constructor;')()\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        throw EtaErr(\"This environment doesn't support async/await\")\n      } else {\n        throw e\n      }\n    }\n  } else {\n    ctor = Function\n  }\n  /* END ASYNC HANDLING */\n  try {\n    return new ctor(\n      options.varName,\n      'E', // EtaConfig\n      'cb', // optional callback\n      compileToString(str, options)\n    ) as TemplateFunction // eslint-disable-line no-new-func\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\n        'Bad template syntax\\n\\n' +\n          e.message +\n          '\\n' +\n          Array(e.message.length + 1).join('=') +\n          '\\n' +\n          compileToString(str, options)\n      )\n    } else {\n      throw e\n    }\n  }\n}\n","import compile from './compile'\nimport { getConfig } from './config'\nimport { promiseImpl } from './utils'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig, PartialConfig } from './config'\nimport { TemplateFunction } from './compile'\nimport { CallbackFn } from './file-handlers'\n\n/* END TYPES */\n\nfunction handleCache (template: string | TemplateFunction, options: EtaConfig): TemplateFunction {\n  var templateFunc\n\n  if (options.cache && options.name && options.templates.get(options.name)) {\n    return options.templates.get(options.name)\n  }\n\n  if (typeof template === 'function') {\n    templateFunc = template\n  } else {\n    templateFunc = compile(template, options)\n  }\n\n  if (options.cache && options.name) {\n    options.templates.define(options.name, templateFunc)\n  }\n\n  return templateFunc\n}\n\nexport default function render (\n  template: string | TemplateFunction,\n  data: object,\n  env?: PartialConfig,\n  cb?: CallbackFn\n) {\n  var options = getConfig(env || {})\n\n  if (options.async) {\n    var result\n    if (!cb) {\n      // No callback, try returning a promise\n      if (typeof promiseImpl === 'function') {\n        return new promiseImpl(function (resolve: Function, reject: Function) {\n          try {\n            result = handleCache(template, options)(data, options)\n            resolve(result)\n          } catch (err) {\n            reject(err)\n          }\n        })\n      } else {\n        throw EtaErr(\"Please provide a callback function, this env doesn't support Promises\")\n      }\n    } else {\n      try {\n        handleCache(template, options)(data, options, cb)\n      } catch (err) {\n        return cb(err)\n      }\n    }\n  } else {\n    return handleCache(template, options)(data, options)\n  }\n}\n"],"names":["EtaErr","message","obj","proto","err","Error","prototype","Object","setPrototypeOf","__proto__","ParseErr","str","indx","whitespace","slice","split","lineNo","length","colNo","Array","join","create","name","value","enumerable","promiseImpl","Function","Promise","copyProps","toObj","fromObj","notConfig","key","prop","hasOwnProperty","call","escMap","&","<","\"","'","replaceChar","s","parse","env","buffer","trimLeftOfNextStr","lastIndex","pushString","strng","shouldTrimRightOfString","stringToPush","replace","wsLeft","wsRight","leftTrim","rightTrim","autoTrim","isArray","trim","String","trimLeft","trimRight","trimWS","push","m","prefixes","exec","interpolate","raw","parseOpenReg","RegExp","tags","parseCloseReg","index","precedingString","prefix","closeTag","content","currentType","t","val","plugins","i","plugin","processAST","compileToString","Parse","res","useWith","varName","buff","buffLength","returnStr","currentBlock","type","autoEscape","compileScope","processFnString","templates","cache","this","Cacher","cacheObj","includeHelper","templateNameOrPath","data","template","get","defaultConfig","async","e","newStr","test","include","getConfig","override","baseConfig","compile","ctor","options","SyntaxError","handleCache","templateFunc","define","bind","cb","resolve","reject"],"mappings":"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"}