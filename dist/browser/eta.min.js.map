{"version":3,"file":"eta.min.js","sources":["../../src/err.ts","../../src/utils.ts","../../src/parse.ts","../../src/compile-string.ts","../../src/storage.ts","../../src/containers.ts","../../src/config.ts","../../src/compile.ts","../../src/render.ts"],"sourcesContent":["function setPrototypeOf (obj: any, proto: any) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(obj, proto)\n  } else {\n    obj.__proto__ = proto\n  }\n}\n\nexport default function EtaErr (message: string): Error {\n  var err = new Error(message)\n  setPrototypeOf(err, EtaErr.prototype)\n  return err\n}\n\nEtaErr.prototype = Object.create(Error.prototype, {\n  name: { value: 'Eta Error', enumerable: false }\n})\n\n// TODO: Class transpilation adds a lot to the bundle size\n\nexport function ParseErr (message: string, str: string, indx: number) {\n  var whitespace = str.slice(0, indx).split(/\\n/)\n\n  var lineNo = whitespace.length\n  var colNo = whitespace[lineNo - 1].length + 1\n  message +=\n    ' at line ' +\n    lineNo +\n    ' col ' +\n    colNo +\n    ':\\n\\n' +\n    '  ' +\n    str.split(/\\n/)[lineNo - 1] +\n    '\\n' +\n    '  ' +\n    Array(colNo).join(' ') +\n    '^'\n  throw EtaErr(message)\n}\n","// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\n// TODO: only include trimLeft polyfill if not in ES6\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\n\ninterface EscapeMap {\n  '&': '&amp;'\n  '<': '&lt;'\n  '\"': '&quot;'\n  \"'\": '&#39;'\n  [index: string]: string\n}\n\n/* END TYPES */\n\nexport var promiseImpl = new Function('return this;')().Promise\n\nexport function hasOwnProp (obj: object, prop: string) {\n  return Object.prototype.hasOwnProperty.call(obj, prop)\n}\n\nexport function copyProps<T> (toObj: T, fromObj: T, notConfig?: boolean) {\n  for (var key in fromObj) {\n    if (hasOwnProp((fromObj as unknown) as object, key)) {\n      toObj[key] = fromObj[key]\n    }\n  }\n  return toObj\n}\n\nfunction trimWS (\n  str: string,\n  env: EtaConfig,\n  wsLeft: string | false,\n  wsRight?: string | false\n): string {\n  var leftTrim\n  var rightTrim\n\n  if (Array.isArray(env.autoTrim)) {\n    // kinda confusing\n    // but _}} will trim the left side of the following string\n    leftTrim = env.autoTrim[1]\n    rightTrim = env.autoTrim[0]\n  } else {\n    leftTrim = rightTrim = env.autoTrim\n  }\n\n  if (wsLeft || wsLeft === false) {\n    leftTrim = wsLeft\n  }\n\n  if (wsRight || wsRight === false) {\n    rightTrim = wsRight\n  }\n\n  if (!rightTrim && !leftTrim) {\n    return str\n  }\n\n  if (leftTrim === 'slurp' && rightTrim === 'slurp') {\n    return str.trim()\n  }\n\n  if (leftTrim === '_' || leftTrim === 'slurp') {\n    // console.log('trimming left' + leftTrim)\n    // full slurp\n    if (String.prototype.trimLeft) {\n      str = str.trimLeft()\n    } else {\n      str = str.replace(/^[\\s\\uFEFF\\xA0]+/, '')\n    }\n  } else if (leftTrim === '-' || leftTrim === 'nl') {\n    // console.log('trimming left nl' + leftTrim)\n    // nl trim\n    str = str.replace(/^(?:\\r\\n|\\n|\\r)/, '')\n  }\n\n  if (rightTrim === '_' || rightTrim === 'slurp') {\n    // console.log('trimming right' + rightTrim)\n    // full slurp\n    if (String.prototype.trimRight) {\n      str = str.trimRight()\n    } else {\n      str = str.replace(/[\\s\\uFEFF\\xA0]+$/, '')\n    }\n  } else if (rightTrim === '-' || rightTrim === 'nl') {\n    // console.log('trimming right nl' + rightTrim)\n    // nl trim\n    str = str.replace(/(?:\\r\\n|\\n|\\r)$/, '') // TODO: make sure this gets \\r\\n\n  }\n\n  return str\n}\n\nvar escMap: EscapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n}\n\nfunction replaceChar (s: string): string {\n  return escMap[s]\n}\n\nfunction XMLEscape (str: any) {\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  var newStr = String(str)\n  if (/[&<\"']/.test(newStr)) {\n    return newStr.replace(/[&<\"']/g, replaceChar)\n  } else {\n    return newStr\n  }\n}\n\nexport { trimWS, XMLEscape }\n","import EtaErr, { ParseErr } from './err'\nimport { trimWS } from './utils'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\n\nexport type TagType = 'r' | 'e' | 'i' | ''\n\nexport interface TemplateObject {\n  t: TagType\n  val: string\n}\n\nexport type AstObject = string | TemplateObject\n\n/* END TYPES */\n\nvar templateLitReg = /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\\${)[^\\\\`])*`/g\n\nvar singleQuoteReg = /'(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r'\\\\])*?'/g\n\nvar doubleQuoteReg = /\"(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r\"\\\\])*?\"/g\n\nexport default function parse(str: string, env: EtaConfig): Array<AstObject> {\n  var buffer: Array<AstObject> = []\n  var trimLeftOfNextStr: string | false = false\n  var lastIndex = 0\n\n  templateLitReg.lastIndex = 0\n  singleQuoteReg.lastIndex = 0\n  doubleQuoteReg.lastIndex = 0\n\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\n    if (strng) {\n      // if string is truthy it must be of type 'string'\n\n      // TODO: benchmark replace( /(\\\\|')/g, '\\\\$1')\n      strng = trimWS(\n        strng,\n        env,\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n        shouldTrimRightOfString\n      )\n\n      if (strng) {\n        // replace \\ with \\\\, ' with \\'\n\n        strng = strng.replace(/\\\\|'/g, '\\\\$&').replace(/\\r\\n|\\n|\\r/g, '\\\\n')\n        // we're going to convert all CRLF to LF so it doesn't take more than one replace\n\n        buffer.push(strng)\n      }\n    }\n  }\n\n  var prefixes = (env.parse.exec + env.parse.interpolate + env.parse.raw).split('').join('|')\n\n  var parseOpenReg = new RegExp('([^]*?)' + env.tags[0] + '(-|_)?\\\\s*(' + prefixes + ')?\\\\s*', 'g')\n  var parseCloseReg = new RegExp('\\'|\"|`|\\\\/\\\\*|(\\\\s*(-|_)?' + env.tags[1] + ')', 'g')\n  // TODO: benchmark having the \\s* on either side vs using str.trim()\n\n  var m\n\n  while ((m = parseOpenReg.exec(str))) {\n    // TODO: check if above needs exec(str) !== null. Don't think it's possible to have 0-width matches but...\n    lastIndex = m[0].length + m.index\n\n    var precedingString = m[1]\n    var wsLeft = m[2]\n    var prefix = m[3] || '' // by default either ~, =, or empty\n\n    pushString(precedingString, wsLeft)\n\n    parseCloseReg.lastIndex = lastIndex\n    var closeTag\n    var currentObj: AstObject | false = false\n\n    while ((closeTag = parseCloseReg.exec(str))) {\n      if (closeTag[1]) {\n        var content = str.slice(lastIndex, closeTag.index)\n\n        parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex\n\n        trimLeftOfNextStr = closeTag[2]\n\n        var currentType: TagType = ''\n        if (prefix === env.parse.exec) {\n          currentType = 'e'\n        } else if (prefix === env.parse.raw) {\n          currentType = 'r'\n        } else if (prefix === env.parse.interpolate) {\n          currentType = 'i'\n        }\n\n        currentObj = { t: currentType, val: content }\n        break\n      } else {\n        var char = closeTag[0]\n        if (char === '/*') {\n          var commentCloseInd = str.indexOf('*/', parseCloseReg.lastIndex)\n\n          if (commentCloseInd === -1) {\n            ParseErr('unclosed comment', str, closeTag.index)\n          }\n          parseCloseReg.lastIndex = commentCloseInd\n        } else if (char === \"'\") {\n          singleQuoteReg.lastIndex = closeTag.index\n\n          var singleQuoteMatch = singleQuoteReg.exec(str)\n          if (singleQuoteMatch) {\n            parseCloseReg.lastIndex = singleQuoteReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        } else if (char === '\"') {\n          doubleQuoteReg.lastIndex = closeTag.index\n          var doubleQuoteMatch = doubleQuoteReg.exec(str)\n\n          if (doubleQuoteMatch) {\n            parseCloseReg.lastIndex = doubleQuoteReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        } else if (char === '`') {\n          templateLitReg.lastIndex = closeTag.index\n          var templateLitMatch = templateLitReg.exec(str)\n          if (templateLitMatch) {\n            parseCloseReg.lastIndex = templateLitReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        }\n      }\n    }\n    if (currentObj) {\n      buffer.push(currentObj)\n    } else {\n      ParseErr('unclosed tag', str, m.index + precedingString.length)\n    }\n  }\n\n  pushString(str.slice(lastIndex, str.length), false)\n\n  if (env.plugins) {\n    for (var i = 0; i < env.plugins.length; i++) {\n      var plugin = env.plugins[i]\n      if (plugin.processAST) {\n        buffer = plugin.processAST(buffer, env)\n      }\n    }\n  }\n\n  return buffer\n}\n","import Parse from './parse'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\nimport { AstObject } from './parse'\n\n/* END TYPES */\n\nexport default function compileToString (str: string, env: EtaConfig) {\n  var buffer: Array<AstObject> = Parse(str, env)\n\n  var res =\n    \"var tR='';\" +\n    (env.useWith ? 'with(' + env.varName + '||{}){' : '') +\n    compileScope(buffer, env) +\n    'if(cb){cb(null,tR)} return tR' +\n    (env.useWith ? '}' : '')\n\n  if (env.plugins) {\n    for (var i = 0; i < env.plugins.length; i++) {\n      var plugin = env.plugins[i]\n      if (plugin.processFnString) {\n        res = plugin.processFnString(res, env)\n      }\n    }\n  }\n\n  return res\n\n  // TODO: is `return cb()` necessary, or could we just do `cb()`\n}\n\nfunction compileScope (buff: Array<AstObject>, env: EtaConfig) {\n  var i = 0\n  var buffLength = buff.length\n  var returnStr = ''\n\n  for (i; i < buffLength; i++) {\n    var currentBlock = buff[i]\n    if (typeof currentBlock === 'string') {\n      var str = currentBlock\n\n      // we know string exists\n      returnStr += \"tR+='\" + str + \"';\"\n    } else {\n      var type = currentBlock.t // ~, s, !, ?, r\n      var content = currentBlock.val || ''\n\n      if (type === 'r') {\n        // raw\n        returnStr += 'tR+=' + content + ';'\n      } else if (type === 'i') {\n        // interpolate\n        if (env.autoEscape) {\n          content = 'E.e(' + content + ')'\n        }\n        returnStr += 'tR+=' + content + ';'\n        // reference\n      } else if (type === 'e') {\n        // execute\n        returnStr += content + '\\n' // you need a \\n in case you have <% } %>\n      }\n    }\n  }\n\n  return returnStr\n}\n","import { copyProps } from './utils'\n\n/* TYPES */\n\ninterface Dict<T> {\n  // Basically, an object where all keys point to a value of the same type\n  [key: string]: T\n}\n\n/* END TYPES */\n\nclass Cacher<T> {\n  constructor (private cache: Dict<T>) {}\n  define (key: string, val: T) {\n    this.cache[key] = val\n  }\n  get (key: string) {\n    // string | array.\n    // TODO: allow array of keys to look down\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\n    return this.cache[key]\n  }\n  remove (key: string) {\n    delete this.cache[key]\n  }\n  reset () {\n    this.cache = {}\n  }\n  load (cacheObj: Dict<T>) {\n    // TODO: this will err with deep objects and `storage` or `plugins` keys.\n    // Update Feb 26: EDITED so it shouldn't err\n    copyProps(this.cache, cacheObj, true)\n  }\n}\n\nexport { Cacher }\n","import { Cacher } from './storage'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\nimport { TemplateFunction } from './compile'\n\n/* END TYPES */\n\nvar templates = new Cacher<TemplateFunction>({})\n\n/* ASYNC LOOP FNs */\n\nexport { templates }\n","import { templates } from './containers'\nimport { copyProps, XMLEscape } from './utils'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { TemplateFunction } from './compile'\nimport { Cacher } from './storage'\n\ntype trimConfig = 'nl' | 'slurp' | false\n\nexport interface EtaConfig {\n  varName: string\n  autoTrim: trimConfig | [trimConfig, trimConfig]\n  autoEscape: boolean\n  tags: [string, string]\n  parse: {\n    interpolate: string\n    raw: string\n    exec: string\n  }\n  e: (str: string) => string\n  plugins: Array<{ processFnString?: Function; processAST?: Function }>\n  async: boolean\n  templates: Cacher<TemplateFunction>\n  cache: boolean\n  views?: string | Array<string>\n  root?: string\n  filename?: string\n  name?: string\n  'view cache'?: boolean\n  useWith?: boolean\n  [index: string]: any\n}\n\nexport type PartialConfig = {\n  [P in keyof EtaConfig]?: EtaConfig[P]\n}\n\n/* END TYPES */\n\nfunction includeHelper (this: EtaConfig, templateNameOrPath: string, data: object): string {\n  var template = this.templates.get(templateNameOrPath)\n  if (!template) {\n    throw EtaErr('Could not fetch template \"' + templateNameOrPath + '\"')\n  }\n  return template(data, this)\n}\n\nvar defaultConfig: EtaConfig = {\n  varName: 'it',\n  autoTrim: [false, 'nl'],\n  autoEscape: true,\n  tags: ['<%', '%>'],\n  parse: {\n    interpolate: '=',\n    raw: '~',\n    exec: ''\n  },\n  async: false,\n  templates: templates,\n  cache: false,\n  plugins: [],\n  useWith: false,\n  e: XMLEscape,\n  include: includeHelper\n}\n\nincludeHelper.bind(defaultConfig)\n\nfunction getConfig (override: PartialConfig, baseConfig?: EtaConfig): EtaConfig {\n  // TODO: run more tests on this\n\n  var res: PartialConfig = {} // Linked\n  copyProps(res, defaultConfig) // Creates deep clone of defaultConfig, 1 layer deep\n\n  if (baseConfig) {\n    copyProps(res, baseConfig)\n  }\n\n  if (override) {\n    copyProps(res, override)\n  }\n\n  return res as EtaConfig\n}\n\nexport { defaultConfig, getConfig }\n","import compileToString from './compile-string'\nimport { getConfig } from './config'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig, PartialConfig } from './config'\nimport { CallbackFn } from './file-handlers'\nexport type TemplateFunction = (data: object, config: EtaConfig, cb?: CallbackFn) => string\n\n/* END TYPES */\n\nexport default function compile (str: string, env?: PartialConfig): TemplateFunction {\n  var options: EtaConfig = getConfig(env || {})\n  var ctor // constructor\n\n  /* ASYNC HANDLING */\n  // The below code is modified from mde/ejs. All credit should go to them.\n  if (options.async) {\n    // Have to use generated function for this, since in envs without support,\n    // it breaks in parsing\n    try {\n      ctor = new Function('return (async function(){}).constructor;')()\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        throw EtaErr(\"This environment doesn't support async/await\")\n      } else {\n        throw e\n      }\n    }\n  } else {\n    ctor = Function\n  }\n  /* END ASYNC HANDLING */\n  try {\n    return new ctor(\n      options.varName,\n      'E', // EtaConfig\n      'cb', // optional callback\n      compileToString(str, options)\n    ) as TemplateFunction // eslint-disable-line no-new-func\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\n        'Bad template syntax\\n\\n' +\n          e.message +\n          '\\n' +\n          Array(e.message.length + 1).join('=') +\n          '\\n' +\n          compileToString(str, options)\n      )\n    } else {\n      throw e\n    }\n  }\n}\n","import compile from './compile'\nimport { getConfig } from './config'\nimport { promiseImpl } from './utils'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig, PartialConfig } from './config'\nimport { TemplateFunction } from './compile'\nimport { CallbackFn } from './file-handlers'\n\n/* END TYPES */\n\nfunction handleCache (template: string | TemplateFunction, options: EtaConfig): TemplateFunction {\n  var templateFunc\n\n  if (options.cache && options.name && options.templates.get(options.name)) {\n    return options.templates.get(options.name)\n  }\n\n  if (typeof template === 'function') {\n    templateFunc = template\n  } else {\n    templateFunc = compile(template, options)\n  }\n\n  if (options.cache && options.name) {\n    options.templates.define(options.name, templateFunc)\n  }\n\n  return templateFunc\n}\n\nexport default function render (\n  template: string | TemplateFunction,\n  data: object,\n  env?: PartialConfig,\n  cb?: CallbackFn\n) {\n  var options = getConfig(env || {})\n\n  if (options.async) {\n    var result\n    if (!cb) {\n      // No callback, try returning a promise\n      if (typeof promiseImpl === 'function') {\n        return new promiseImpl(function (resolve: Function, reject: Function) {\n          try {\n            result = handleCache(template, options)(data, options)\n            resolve(result)\n          } catch (err) {\n            reject(err)\n          }\n        })\n      } else {\n        throw EtaErr(\"Please provide a callback function, this env doesn't support Promises\")\n      }\n    } else {\n      try {\n        handleCache(template, options)(data, options, cb)\n      } catch (err) {\n        return cb(err)\n      }\n    }\n  } else {\n    return handleCache(template, options)(data, options)\n  }\n}\n"],"names":["EtaErr","message","obj","proto","err","Error","prototype","Object","setPrototypeOf","__proto__","ParseErr","str","indx","whitespace","slice","split","lineNo","length","colNo","Array","join","create","name","value","enumerable","promiseImpl","Function","Promise","copyProps","toObj","fromObj","notConfig","key","prop","hasOwnProperty","call","escMap","&","<","\"","'","replaceChar","s","templateLitReg","singleQuoteReg","doubleQuoteReg","parse","env","buffer","trimLeftOfNextStr","lastIndex","pushString","strng","shouldTrimRightOfString","wsLeft","wsRight","leftTrim","rightTrim","isArray","autoTrim","trim","String","trimLeft","replace","trimRight","trimWS","push","m","prefixes","exec","interpolate","raw","parseOpenReg","RegExp","tags","parseCloseReg","index","closeTag","precedingString","prefix","currentObj","content","currentType","t","val","char","commentCloseInd","indexOf","plugins","i","plugin","processAST","compileToString","Parse","res","useWith","varName","buff","buffLength","returnStr","currentBlock","type","autoEscape","compileScope","processFnString","templates","cache","this","Cacher","cacheObj","includeHelper","templateNameOrPath","data","template","get","defaultConfig","async","e","newStr","test","include","getConfig","override","baseConfig","compile","ctor","options","SyntaxError","handleCache","templateFunc","define","bind","cb","resolve","reject"],"mappings":"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"}