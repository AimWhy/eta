{"version":3,"file":"eta.min.js","sources":["../../src/utils.ts","../../src/parse.ts","../../src/compile-string.ts","../../src/storage.ts","../../src/err.ts","../../src/containers.ts","../../src/config.ts","../../src/compile.ts","../../src/render.ts"],"sourcesContent":["// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\n// TODO: only include trimLeft polyfill if not in ES6\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\n\ninterface EscapeMap {\n  '&': '&amp;'\n  '<': '&lt;'\n  '\"': '&quot;'\n  \"'\": '&#39;'\n  [index: string]: string\n}\n\n/* END TYPES */\n\nexport var promiseImpl = new Function('return this;')().Promise\n\nexport function hasOwnProp (obj: object, prop: string) {\n  return Object.prototype.hasOwnProperty.call(obj, prop)\n}\n\nexport function copyProps<T> (toObj: T, fromObj: T, notConfig?: boolean) {\n  for (var key in fromObj) {\n    if (hasOwnProp((fromObj as unknown) as object, key)) {\n      toObj[key] = fromObj[key]\n    }\n  }\n  return toObj\n}\n\nfunction trimWS (\n  str: string,\n  env: EtaConfig,\n  wsLeft: string | false,\n  wsRight?: string | false\n): string {\n  var leftTrim\n  var rightTrim\n\n  if (typeof env.autoTrim === 'string') {\n    leftTrim = rightTrim = env.autoTrim\n  } else if (Array.isArray(env.autoTrim)) {\n    // kinda confusing\n    // but _}} will trim the left side of the following string\n    leftTrim = env.autoTrim[1]\n    rightTrim = env.autoTrim[0]\n  }\n\n  if (wsLeft || wsLeft === false) {\n    leftTrim = wsLeft\n  }\n\n  if (wsRight || wsRight === false) {\n    rightTrim = wsRight\n  }\n\n  if (leftTrim === 'slurp' && rightTrim === 'slurp') {\n    return str.trim()\n  }\n\n  if (leftTrim === '_' || leftTrim === 'slurp') {\n    // console.log('trimming left' + leftTrim)\n    // full slurp\n    if (String.prototype.trimLeft) {\n      str = str.trimLeft()\n    } else {\n      str = str.replace(/^[\\s\\uFEFF\\xA0]+/, '')\n    }\n  } else if (leftTrim === '-' || leftTrim === 'nl') {\n    // console.log('trimming left nl' + leftTrim)\n    // nl trim\n    str = str.replace(/^(?:\\n|\\r|\\r\\n)/, '')\n  }\n\n  if (rightTrim === '_' || rightTrim === 'slurp') {\n    // console.log('trimming right' + rightTrim)\n    // full slurp\n    if (String.prototype.trimRight) {\n      str = str.trimRight()\n    } else {\n      str = str.replace(/[\\s\\uFEFF\\xA0]+$/, '')\n    }\n  } else if (rightTrim === '-' || rightTrim === 'nl') {\n    // console.log('trimming right nl' + rightTrim)\n    // nl trim\n    str = str.replace(/(?:\\n|\\r|\\r\\n)$/, '') // TODO: make sure this gets \\r\\n\n  }\n\n  return str\n}\n\nvar escMap: EscapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n}\n\nfunction replaceChar (s: string): string {\n  return escMap[s]\n}\n\nfunction XMLEscape (str: any) {\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  var newStr = String(str)\n  if (/[&<\"']/.test(newStr)) {\n    return newStr.replace(/[&<\"']/g, replaceChar)\n  } else {\n    return newStr\n  }\n}\n\nexport { trimWS, XMLEscape }\n","import EtaErr, { ParseErr } from './err'\nimport { trimWS } from './utils'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\n\nexport type TagType = 'r' | 'e' | 'i' | ''\n\nexport interface TemplateObject {\n  t: TagType\n  val: string\n}\n\nexport type AstObject = string | TemplateObject\n\n/* END TYPES */\n\nexport default function parse(str: string, env: EtaConfig): Array<AstObject> {\n  var buffer: Array<AstObject> = []\n  var trimLeftOfNextStr: string | false = false\n  var lastIndex = 0\n\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\n    if (strng) {\n      // if string is truthy it must be of type 'string'\n      var stringToPush = strng.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\")\n      // TODO: benchmark replace( /(\\\\|')/g, '\\\\$1')\n      stringToPush = trimWS(\n        stringToPush,\n        env,\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n        shouldTrimRightOfString\n      )\n      if (stringToPush) {\n        buffer.push(stringToPush)\n      }\n    }\n  }\n\n  var prefixArr = []\n\n  if (env.parse.exec) {\n    prefixArr.push(env.parse.exec)\n  }\n  if (env.parse.interpolate) {\n    prefixArr.push(env.parse.interpolate)\n  }\n  if (env.parse.raw) {\n    prefixArr.push(env.parse.raw)\n  }\n\n  var parseReg = new RegExp(\n    '([^]*?)' +\n      env.tags[0] +\n      '(-|_)?\\\\s*(' +\n      prefixArr.join('|') +\n      ')?\\\\s*((?:[^]*?(?:\\'(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\n\\\\r\\'\\\\\\\\])*?\\'|`(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\\\\\`])*?`|\"(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\n\\\\r\"\\\\\\\\])*?\"|\\\\/\\\\*[^]*?\\\\*\\\\/)?)*?)\\\\s*(-|_)?' +\n      env.tags[1],\n    'g'\n  )\n\n  // TODO: benchmark having the \\s* on either side vs using str.trim()\n\n  var m\n\n  while ((m = parseReg.exec(str)) !== null) {\n    lastIndex = m[0].length + m.index\n    var i = m.index\n\n    var precedingString = m[1]\n    var wsLeft = m[2]\n    var prefix = m[3] || '' // by default either ~, =, or empty\n    var content = m[4]\n\n    pushString(precedingString, wsLeft)\n    trimLeftOfNextStr = m[5]\n\n    // if i is 0, we're gonna set I do\n\n    var currentType: TagType = ''\n    if (prefix === env.parse.exec) {\n      currentType = 'e'\n    } else if (prefix === env.parse.raw) {\n      currentType = 'r'\n    } else if (prefix === env.parse.interpolate) {\n      currentType = 'i'\n    }\n\n    buffer.push({ t: currentType, val: content })\n  }\n\n  pushString(str.slice(lastIndex, str.length), false)\n\n  if (env.plugins) {\n    for (var i = 0; i < env.plugins.length; i++) {\n      var plugin = env.plugins[i]\n      if (plugin.processAST) {\n        buffer = plugin.processAST(buffer, env)\n      }\n    }\n  }\n\n  return buffer\n}\n","import Parse from './parse'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\nimport { AstObject } from './parse'\n\n/* END TYPES */\n\nexport default function compileToString (str: string, env: EtaConfig) {\n  var buffer: Array<AstObject> = Parse(str, env)\n\n  var res =\n    \"var tR='';\" +\n    (env.useWith ? 'with(' + env.varName + '||{}){' : '') +\n    compileScope(buffer, env)\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r') +\n    'if(cb){cb(null,tR)} return tR' +\n    (env.useWith ? '}' : '')\n\n  if (env.plugins) {\n    for (var i = 0; i < env.plugins.length; i++) {\n      var plugin = env.plugins[i]\n      if (plugin.processFnString) {\n        res = plugin.processFnString(res, env)\n      }\n    }\n  }\n\n  return res\n\n  // TODO: is `return cb()` necessary, or could we just do `cb()`\n}\n\nfunction compileScope (buff: Array<AstObject>, env: EtaConfig) {\n  var i = 0\n  var buffLength = buff.length\n  var returnStr = ''\n\n  for (i; i < buffLength; i++) {\n    var currentBlock = buff[i]\n    if (typeof currentBlock === 'string') {\n      var str = currentBlock\n\n      // we know string exists\n      returnStr += \"tR+='\" + str + \"';\"\n    } else {\n      var type = currentBlock.t // ~, s, !, ?, r\n      var content = currentBlock.val || ''\n\n      if (type === 'i') {\n        returnStr += 'tR+=' + content + ';'\n      } else if (type === 'r') {\n        returnStr = 'tR+=E.e(' + content + ')'\n        // reference\n      } else if (type === 'e') {\n        // execute\n        returnStr += content\n      }\n    }\n  }\n\n  return returnStr\n}\n","import { copyProps } from './utils'\n\n/* TYPES */\n\ninterface Dict<T> {\n  // Basically, an object where all keys point to a value of the same type\n  [key: string]: T\n}\n\n/* END TYPES */\n\nclass Cacher<T> {\n  constructor (private cache: Dict<T>) {}\n  define (key: string, val: T) {\n    this.cache[key] = val\n  }\n  get (key: string) {\n    // string | array.\n    // TODO: allow array of keys to look down\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\n    return this.cache[key]\n  }\n  remove (key: string) {\n    delete this.cache[key]\n  }\n  reset () {\n    this.cache = {}\n  }\n  load (cacheObj: Dict<T>) {\n    // TODO: this will err with deep objects and `storage` or `plugins` keys.\n    // Update Feb 26: EDITED so it shouldn't err\n    copyProps(this.cache, cacheObj, true)\n  }\n}\n\nexport { Cacher }\n","function setPrototypeOf (obj: any, proto: any) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(obj, proto)\n  } else {\n    obj.__proto__ = proto\n  }\n}\n\nexport default function EtaErr (message: string): Error {\n  var err = new Error(message)\n  setPrototypeOf(err, EtaErr.prototype)\n  return err\n}\n\nEtaErr.prototype = Object.create(Error.prototype, {\n  name: { value: 'Eta Error', enumerable: false }\n})\n\n// TODO: Class transpilation adds a lot to the bundle size\n\nexport function ParseErr (message: string, str: string, indx: number) {\n  var whitespace = str.slice(0, indx).split(/\\n/)\n\n  var lineNo = whitespace.length\n  var colNo = whitespace[lineNo - 1].length + 1\n  message +=\n    ' at line ' +\n    lineNo +\n    ' col ' +\n    colNo +\n    ':\\n\\n' +\n    '  ' +\n    str.split(/\\n/)[lineNo - 1] +\n    '\\n' +\n    '  ' +\n    Array(colNo).join(' ') +\n    '^'\n  throw EtaErr(message)\n}\n","import { Cacher } from './storage'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig } from './config'\nimport { TemplateFunction } from './compile'\n\ninterface EscapeMap {\n  '&': '&amp;'\n  '<': '&lt;'\n  '\"': '&quot;'\n  \"'\": '&#39;'\n  [index: string]: string\n}\n\ninterface GenericData {\n  [index: string]: any\n}\n\n/* END TYPES */\n\nvar templates = new Cacher<TemplateFunction>({})\n\n/* ASYNC LOOP FNs */\n\nfunction include (templateNameOrPath: string, data: GenericData, config: EtaConfig): string {\n  var template = config.storage.templates.get(templateNameOrPath)\n  if (!template) {\n    throw EtaErr('Could not fetch template \"' + templateNameOrPath + '\"')\n  }\n  return template(data, config)\n}\n\nexport { templates, include }\n","import { templates } from './containers'\nimport { copyProps, XMLEscape } from './utils'\n\n/* TYPES */\n\nimport { TemplateFunction } from './compile'\nimport { Cacher } from './storage'\n\ntype trimConfig = 'nl' | 'slurp' | false\n\nexport interface EtaConfig {\n  varName: string\n  autoTrim: trimConfig | [trimConfig, trimConfig]\n  autoEscape: boolean\n  tags: [string, string]\n  parse: {\n    interpolate: string\n    raw: string\n    exec: string\n  }\n  e: (str: string) => string\n  plugins: Array<{ processFnString?: Function; processAST?: Function }>\n  async: boolean\n  templates: Cacher<TemplateFunction>\n  cache: boolean\n  views?: string | Array<string>\n  root?: string\n  filename?: string\n  name?: string\n  'view cache'?: boolean\n  useWith?: boolean\n  [index: string]: any\n}\n\nexport type PartialConfig = {\n  [P in keyof EtaConfig]?: EtaConfig[P]\n}\n\n/* END TYPES */\n\nvar defaultConfig: EtaConfig = {\n  varName: 'it',\n  autoTrim: [false, 'nl'],\n  autoEscape: true,\n  tags: ['{{', '}}'],\n  parse: {\n    interpolate: '=',\n    raw: '~',\n    exec: ''\n  },\n  async: false,\n  templates: templates,\n  cache: false,\n  plugins: [],\n  useWith: false,\n  e: XMLEscape\n}\n\nfunction getConfig (override: PartialConfig, baseConfig?: EtaConfig): EtaConfig {\n  // TODO: run more tests on this\n\n  var res: PartialConfig = {} // Linked\n  copyProps(res, defaultConfig) // Creates deep clone of res, 1 layer deep\n\n  if (baseConfig) {\n    copyProps(res, baseConfig)\n  }\n\n  if (override) {\n    copyProps(res, override)\n  }\n\n  return res as EtaConfig\n}\n\nexport { defaultConfig, getConfig }\n","import compileToString from './compile-string'\nimport { getConfig } from './config'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig, PartialConfig } from './config'\nimport { CallbackFn } from './file-handlers'\nexport type TemplateFunction = (data: object, config: EtaConfig, cb?: CallbackFn) => string\n\n/* END TYPES */\n\nexport default function compile (str: string, env?: PartialConfig): TemplateFunction {\n  var options: EtaConfig = getConfig(env || {})\n  var ctor // constructor\n\n  /* ASYNC HANDLING */\n  // The below code is modified from mde/ejs. All credit should go to them.\n  if (options.async) {\n    // Have to use generated function for this, since in envs without support,\n    // it breaks in parsing\n    try {\n      ctor = new Function('return (async function(){}).constructor;')()\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        throw new Error(\"This environment doesn't support async/await\")\n      } else {\n        throw e\n      }\n    }\n  } else {\n    ctor = Function\n  }\n  /* END ASYNC HANDLING */\n  try {\n    return new ctor(\n      options.varName,\n      'E', // EtaConfig\n      'cb', // optional callback\n      compileToString(str, options)\n    ) as TemplateFunction // eslint-disable-line no-new-func\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\n        'Bad template syntax\\n\\n' +\n          e.message +\n          '\\n' +\n          Array(e.message.length + 1).join('=') +\n          '\\n' +\n          compileToString(str, options)\n      )\n    } else {\n      throw e\n    }\n  }\n}\n","import compile from './compile'\nimport { getConfig } from './config'\nimport { promiseImpl } from './utils'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport { EtaConfig, PartialConfig } from './config'\nimport { TemplateFunction } from './compile'\nimport { CallbackFn } from './file-handlers'\n\n/* END TYPES */\n\nfunction handleCache (template: string | TemplateFunction, options: EtaConfig): TemplateFunction {\n  var templateFunc\n\n  if (options.cache && options.name && options.storage.templates.get(options.name)) {\n    return options.storage.templates.get(options.name)\n  }\n\n  if (typeof template === 'function') {\n    templateFunc = template\n  } else {\n    templateFunc = compile(template, options)\n  }\n\n  if (options.cache && options.name) {\n    options.storage.templates.define(options.name, templateFunc)\n  }\n\n  return templateFunc\n}\n\nexport default function render (\n  template: string | TemplateFunction,\n  data: object,\n  env?: PartialConfig,\n  cb?: CallbackFn\n) {\n  var options = getConfig(env || {})\n\n  if (options.async) {\n    var result\n    if (!cb) {\n      // No callback, try returning a promise\n      if (typeof promiseImpl === 'function') {\n        return new promiseImpl(function (resolve: Function, reject: Function) {\n          try {\n            result = handleCache(template, options)(data, options)\n            resolve(result)\n          } catch (err) {\n            reject(err)\n          }\n        })\n      } else {\n        throw EtaErr(\"Please provide a callback function, this env doesn't support Promises\")\n      }\n    } else {\n      try {\n        handleCache(template, options)(data, options, cb)\n      } catch (err) {\n        return cb(err)\n      }\n    }\n  } else {\n    return handleCache(template, options)(data, options)\n  }\n}\n"],"names":["promiseImpl","Function","Promise","copyProps","toObj","fromObj","notConfig","key","obj","prop","Object","prototype","hasOwnProperty","call","escMap","&","<","\"","'","replaceChar","s","parse","str","env","buffer","trimLeftOfNextStr","lastIndex","pushString","strng","shouldTrimRightOfString","stringToPush","replace","wsLeft","wsRight","leftTrim","rightTrim","autoTrim","Array","isArray","trim","String","trimLeft","trimRight","trimWS","push","prefixArr","exec","interpolate","raw","m","parseReg","RegExp","tags","join","length","index","i","precedingString","prefix","content","currentType","t","val","slice","plugins","plugin","processAST","compileToString","Parse","res","useWith","varName","buff","buffLength","returnStr","currentBlock","type","compileScope","processFnString","cache","this","Cacher","cacheObj","EtaErr","message","proto","err","Error","setPrototypeOf","__proto__","create","name","value","enumerable","templates","defaultConfig","autoEscape","async","e","newStr","test","getConfig","override","baseConfig","compile","ctor","options","SyntaxError","handleCache","template","templateFunc","storage","get","define","data","cb","resolve","reject"],"mappings":"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"}